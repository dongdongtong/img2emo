# Created by: @luckydog on 2024-11-02
# This is a dataset for loading EMOTIC dataset.


"""Created by Dingsd on 11/01/2024 22:21
"""

from collections.abc import Sequence
import os
from os.path import basename, dirname, join

import torch
import torch.nn as nn
from torch.utils.data import Dataset
import numpy as np
from torchvision import transforms as T
from torch.utils.data import Dataset as TorchDataset
from sklearn.model_selection import train_test_split
from scipy.io import loadmat

from ..base_dataset import DatasetBase, ContinuousLabelDatum
from ..build import DATASET_REGISTRY, DATASET_WRAPPER_REGISTRY
from utils.tools import read_image
    
import os
import os.path as osp
import random
from copy import deepcopy

import pandas as pd

from typing import Dict, List

from utils import read_json, mkdir_if_missing, write_json


@DATASET_REGISTRY.register()
class LNSIMCG(DatasetBase):
    # generate data list and saved!
    # make a data structure for hematoma segmentation
    # train val test split
    
    _lab2cname = {
        0: 'memoriability',
    }
    
    _classnames = ['memoriability',]
    
    _num_classes = 1
    
    def __init__(self, cfg):
        self.cfg = cfg
        
        source_domain = cfg.DATASET.SOURCE_DOMAINS[0]
        
        image_dir = osp.join(cfg.DATASET.ROOT, source_domain, "images")
        image_paths = os.listdir(image_dir)
        image_paths = sorted(image_paths)
        print(f"image_paths head 10: {image_paths[:10]}")
        image_paths = [osp.join(image_dir, img) for img in image_paths]
        
        fold = cfg.DATASET.FOLD
        label_path = osp.join(cfg.DATASET.ROOT, source_domain, "subject_hrs1.mat")
        label_data = loadmat(label_path)
        label_data = label_data["subject_hrs1"]   # for LNSIM, we have multiple group of labels, which is generated by different raters
        label_data = label_data.mean(axis=0)  # average the labels from different raters
        
        label_path2 = osp.join(cfg.DATASET.ROOT, source_domain, "subject_hrs2.mat")
        label_data2 = loadmat(label_path2)
        label_data2 = label_data2["subject_hrs2"]   # for LNSIM, we have multiple group of labels, which is generated by different raters
        label_data2 = label_data2.mean(axis=0)  # average the labels from different raters
        
        train_idxs, test_idxs = train_test_split(range(len(image_paths)), test_size=432, random_state=42)
        train_image_paths, y_train = zip(*[(image_paths[i], label_data[i]) for i in train_idxs])
        val_image_paths, y_val = zip(*[(image_paths[i], label_data[i]) for i in test_idxs])
        test_image_paths, y_test = zip(*[(image_paths[i], label_data2[i]) for i in test_idxs])
        
        # convert to list of ContinuousLabelDatum
        train_x = [ContinuousLabelDatum(img_path, memoriability) for img_path, memoriability in zip(train_image_paths, y_train)]
        valid_x = [ContinuousLabelDatum(img_path, memoriability) for img_path, memoriability in zip(val_image_paths, y_val)]
        test_x = [ContinuousLabelDatum(img_path, memoriability) for img_path, memoriability in zip(test_image_paths, y_test)]
        
        super().__init__(train_x=train_x, train_u=None, val=valid_x, test=test_x, num_classes=self._num_classes, lab2cname=self._lab2cname, classnames=self._classnames)